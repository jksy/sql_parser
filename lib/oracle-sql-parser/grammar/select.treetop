module OracleSqlParser::Grammar
  grammar Select
    rule select_statement
      subquery for_update_clause:for_update_clause? {
        def ast
          OracleSqlParser::Ast::SelectStatement[
            :subquery => subquery.ast,
            :for_update_clause => for_update_clause.ast]
        end
      }
    end

    rule subquery
      query:(
        subquery_with_union /
        subquery_only_query_block
      )
      space? order_by_clause:order_by_clause? {
        def ast
          result = query.ast
          result.order_by_clause = order_by_clause.ast
          result
        end
      }
    end

    rule subquery_only_query_block
      '(' space? query_block:query_block space? ')' /
      query_block:query_block {
        def ast
          OracleSqlParser::Ast::Subquery[
            :query_block => query_block.ast
          ]
        end
      }
    end

    rule subquery_with_union
      '(' query_block1:query_block space? union_or_intersect_or_minus space? query_block2:query_block ')' /
      query_block1:query_block space? union_or_intersect_or_minus space? query_block2:query_block {
        def ast
          OracleSqlParser::Ast::Subquery[
            :query_block1 => query_block1.ast,
            :union => union_or_intersect_or_minus.ast,
            :query_block2 => query_block2.ast
            ]
        end
      }
    end

    rule union_or_intersect_or_minus
      (
        union:union_all /
        intersect:intersect_keyword /
        minus:minus_keyword
      ) {
        def ast
          if respond_to? :union
            union.ast
          elsif respond_to? :intersect
            OracleSqlParser::Ast::Array[intersect.ast]
          elsif respond_to? :minus
            OracleSqlParser::Ast::Array[minus.ast]
          end
        end
      }
    end

    rule union_all
      union_keyword all:(space all_keyword)? {
        def ast
          OracleSqlParser::Ast::Array[
            union_keyword.ast,
            all.try(:all_keyword).ast
          ]
        end
      }
    end

    rule query_block
      (subquery_factoring_clause:subquery_factoring_clause space)?
      select_keyword space
      hint:hint?
      mod:(modifier:(all_keyword / distinct_keyword / unique_keyword) space)?
      select_list space?
      from_keyword space?
      select_sources space?
      where_clause:where_clause? space?
      group_by_clause:group_by_clause? space?
      model_clause:model_clause? space? {
        def ast
          OracleSqlParser::Ast::QueryBlock[
            :hint => hint.ast,
            :modifier => modifier.ast,
            :select_list => select_list.ast,
            :select_sources => select_sources.ast,
            :where_clause => where_clause.ast,
            :group_by_clause => group_by_clause.ast,
            :model_clause => model_clause.ast]
        end

        def modifier
          mod.modifier if mod.respond_to? :modifier
        end
      }
    end

    rule select_sources
      join_clause /
      '(' space? join_clause space? ')' /
      table_reference  {
        def ast
          if respond_to? :join_clause
            join_clause.ast
          else
            super
          end
        end
      }
    end

    rule join_clause
      table_reference space
      (
        outer_join_clause /
        inner_cross_join_clause {
          def ast
            super
          end
        }
      )
    end

    rule inner_cross_join_clause
      inner_join_clause /
      cross_join_clause {
        def ast
          super
        end
      }
    end

    rule inner_join_clause
      inner_keyword space? join_keyword space? table_reference space?
      (
        on_keyword space? condition /
        using_keyword space? '(' space? column_list space? ')'
      ) {
        def ast
          'inner_join_clause'
        end
      }
    end

    rule cross_join_clause
      (
        cross_keyword /
        natural_keyword (space inner_keyword)?
      ) space join_keyword space table_reference {
        def ast
          'cross_join_clause'
        end
      }
    end

    rule column_list
      column_name (space? ',' space? column_name)* {
        def ast
          'column_list'
        end
      }
    end

    rule outer_join_clause
      query_partition_clause?
      (
        outer_join_type space? join_keyword /
        natural_keyword space? outer_join_type? space? join_keyword
      ) space
      table_reference space
      (query_partition_clause space)?
      (
        on_keyword space? condition /
        using_keyword space '(' space? column_list space? ')'
      ) {
        def ast
          'outer_join_clause'
        end
      }
    end

    rule query_partition_clause
      'query_partition_clause' {
        def ast
          'query_partition_clause'
        end
      }
    end

    rule outer_join_type
      (
        full_keyword /
        left_keyword /
        right_keyword
      ) (space outer_keyword)? {
        def ast
          'outer_join_type'
        end
      }
    end

    rule for_update_clause
      for_keyword space?
      update_keyword space?
      of:(of_keyword space for_update_clause_columns space?)?
      wait:(
        w:wait_keyword space? time:integer / 
        w:nowait_keyword
      )? {
        def ast
          OracleSqlParser::Ast::ForUpdateClause[
            :columns => of.try(:for_update_clause_columns).ast,
            :wait => wait.try(:w).ast,
            :time => wait.try(:time).ast
          ].remove_nil_values!
        end
      }
    end

    rule for_update_clause_columns
      for_update_clause_column more:(space? ',' space? more_for_update_clause_columns:for_update_clause_column)* {
        def ast
          OracleSqlParser::Ast::Array[
            for_update_clause_column.ast, *more_for_update_clause_columns.map(&:ast)
          ]
        end

        def more_for_update_clause_columns
          more.elements.map(&:more_for_update_clause_columns)
        end
      }
    end

    rule for_update_clause_column
      (
        schema_name space? '.' space? table_name space? '.' space? column_name /
        table_name space? '.' space? column_name /
        space? column_name
      ) {
        def ast
          OracleSqlParser::Ast::Identifier[:name => text_value]
        end
      }
    end

    rule subquery_factoring_clause
      'subquery_factoring_clause' { # not implemented
        def ast
          'subquery_factoring_clause'
        end
      }
    end

    rule order_by_clause
      order_keyword space siblings:siblings_keyword? space? by_keyword space order_by_clause_items {
        def ast
          OracleSqlParser::Ast::OrderByClause[
            :siblings => siblings.ast,
            :items => order_by_clause_items.ast
          ]
        end
      }
    end

    rule order_by_clause_items
      order_by_clause_item
      more:(space? ',' space? order_by_clause_item space?)* {
        def ast
          OracleSqlParser::Ast::Array[
            order_by_clause_item.ast, *more_order_by_clause_items.map(&:ast)
          ]
        end

        def more_order_by_clause_items
          more.elements.map(&:order_by_clause_item)
        end
      }
    end

    rule order_by_clause_item
      target:(expr / position / c_alias) space?
      asc:(asc_keyword / desc_keyword)? space?
      null:(nulls_keyword space first_or_last:(first_keyword / last_keyword))? {
        def ast
          OracleSqlParser::Ast::OrderByClauseItem[
            :target => target.ast,
            :asc => asc.ast,
            :nulls => nulls.ast
          ]
        end

        def nulls
          if null.respond_to? :first_or_last
            null.first_or_last
          else
            nil
          end
        end
      }
    end

    rule select_list
      select_one_column more_list:( space? ',' space? c:select_one_column space? )* {
        def ast
          OracleSqlParser::Ast::Array[select_one_column.ast, *more_columns.map(&:ast)]
        end

        def more_columns
          more_list.elements.map{|element| element.c}
        end
      }
    end

    rule select_one_column
      ( select_table /
        expr /
        select_column
        ) {
        def ast
          super
        end
      }
    end

    rule select_table
      (table_name '.')? '*' {
        def ast
          OracleSqlParser::Ast::Identifier[:name => text_value]
        end
      }
    end

    rule select_column
      sql_expression ( space ( as_keyword space )? c_alias )?  {
        def ast
          sql_expression.ast
        end
      }
    end

    # group
    rule group_by_clause
      group_keyword space by_keyword space target:group_column space?
        t:(',' space? more_target:group_column space?)*
        h:(having_keyword space condition:condition)? {
        def ast
          OracleSqlParser::Ast::GroupByClause[
            :targets => OracleSqlParser::Ast::Array[
              target.ast, *more_targets.map(&:ast)
            ],
            :having => condition.ast
          ]
        end

        def more_targets
          t.elements.map{|e| e.more_target}
        end

        def condition
          if h.respond_to? :condition
            h.condition
          else
            nil
          end
        end
      }
    end

    rule group_column
      (
        expr /
        rollup_cube_clause /
        grouping_sets_clause
      ) {
        def ast
          super
        end
      }
    end

    rule rollup_cube_clause
      func_name:(rollup_keyword / cube_keyword) space? grouping_expression_list {
        def ast
          OracleSqlParser::Ast::RollupCubeClause[
            :func_name => func_name.ast,
            :args => grouping_expression_list.ast
          ]
        end
      }
    end

    rule grouping_sets_clause
      'grouping_sets_clause' { # not implemented
        def ast
          'grouping_sets_clause'
        end
      }
    end

    rule grouping_expression_list
      expression_list {
        def ast
          super
        end
      }
    end

    rule model_clause
      'model_clause' {
        def ast
          'model_clause'
        end
      }
    end
  end
end
