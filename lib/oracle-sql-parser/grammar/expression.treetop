module OracleSqlParser::Grammar
  grammar Expression
    rule sql_expression
      ex:(
        compound_expression /
        function_expression /
        case_expression /
        cursor_expression /
        datetime_expression /
        interval_expression /
        object_access_expression /
        scalar_subquery_expression /
        model_expression /
        type_constructor_expression /
        simple_expression /
        variable_expression
        ) {
        def ast
          ex.ast
#          super
#          tree = ex.ast
##          tree[:as] = alias_name.try(:as_keyword).try(:ast)
#          tree[:alias] = alias_name.try(:ident).try(:ast)
#          tree
        end
      }
    end

    rule simple_expression
        rownum_keyword /
        sysdate_keyword /
        systimestamp_keyword /
        null_keyword /
        text_literal /
        number_literal /
        sequence /
        simple_expression_column {
        def ast
          super
        end
      }
    end

    rule simple_expression_column
      name:(
        ( schema_name space? '.' space? table_name '.' / table_name space? '.' space? )?
        ( rowid_keyword / column_name )
      ) {
        def ast
          OracleSqlParser::Ast::Identifier.new(:name => text_value)
        end
      }
    end

    rule not_compound_expressions
      ex:(
        function_expression /
        case_expression /
        cursor_expression /
        datetime_expression /
        interval_expression /
        object_access_expression /
        scalar_subquery_expression /
        model_expression /
        type_constructor_expression /
        simple_expression /
        variable_expression)
      {
        def ast
          ex.ast
        end
      }
    end

    rule compound_expression
      ex:(
        left_parenthesis:'(' space? left:expr space? right_parenthesis:')' /
        left:not_compound_expressions space? op:('*' / '/' / '+' / '-' / '||') space? right:expr /
        op:(prior_keyword) space? right:expr
      )

        {
          def ast
            OracleSqlParser::Ast::CompoundExpression[
              :left_parenthesis => left_parenthesis.ast,
              :left => left.ast,
              :op => op.ast,
              :right => right.ast,
              :right_parenthesis => right_parenthesis.ast,
            ]
          end

          def left_parenthesis
            ex.left_parenthesis if ex.respond_to? :left_parenthesis
          end

          def left
            ex.left if ex.respond_to? :left
          end

          def not_compound_expressions
            ex.not_compound_expressions if ex.respond_to? :not_compound_expressions
          end

          def op
            ex.op if ex.respond_to? :op
          end

          def right
            ex.right if ex.respond_to? :right
          end

          def right_parenthesis
            ex.right_parenthesis if ex.respond_to? :right_parenthesis
          end
        }
    end

    rule case_expression
      case_keyword space? case_expression:(simple_case_expression / searched_case_expression) space?
      else_clause:else_clause? space? end_keyword {
        def ast
          ast = case_expression.ast
          ast.else_clause = else_clause.ast
          ast
        end
      }
    end

    rule simple_case_expression
      expr space w:(when_keyword space comparison_expr space then_keyword space? return_expr space?)+ {
        def ast
          OracleSqlParser::Ast::SimpleCaseExpression[
            :condition => expr.ast,
            :when_clauses => OracleSqlParser::Ast::Array[*when_clauses]
          ]
        end

        def when_clauses
          w.elements.map do |elem|
            OracleSqlParser::Ast::Hash[
              :when_expr => elem.comparison_expr.ast,
              :return_expr => elem.return_expr.ast
            ]
          end
        end
      }
    end

    rule comparison_expr
      expr {
        def ast
          super
        end
      }
    end

    rule return_expr
      expr {
        def ast
          super
        end
      }
    end

    rule else_expr
      expr {
        def ast
          super
        end
      }
    end

    rule searched_case_expression
      when_keyword space? condition space? then_keyword space? return_expr {
        def ast
          OracleSqlParser::Ast::SearchedCaseExpression[
            :when_condition => condition.ast,
            :return_expr => return_expr.ast
          ]
        end
      }
    end

    rule else_clause
      else_keyword space? else_expr {
        def ast
          else_expr.ast
        end
      }
    end

    rule cursor_expression
      'cursor_expression' # not implemented
    end

    rule datetime_expression
      'datetime_expression' # not implemented
    end

    rule function_expression
      function_name space? '(' space? function_args:function_args? space? ')' {
        def ast
          OracleSqlParser::Ast::FunctionExpressoin[
            :name => function_name.ast,
            :args => function_args.ast
          ]
        end
      }
    end

    rule function_name
      (
        package_name '.' procedure_name /
        procedure_name
      ) {
        def ast
          OracleSqlParser::Ast::Identifier[:name => text_value]
        end
      }
    end

    rule function_args
      function_arg more:(space? ',' space? function_arg)* {
        def ast
          OracleSqlParser::Ast::Array[function_arg.ast, *more_function_args.map(&:ast)]
        end

        def more_function_args
          more.elements.map(&:function_arg)
        end
      }
    end

    rule function_arg
      expr {
        def ast
          super
        end
      }
    end

    rule interval_expression
      'interval_expression' # not implemented
    end

    rule object_access_expression
      'object_access_expression'
    end

    rule scalar_subquery_expression
      'scalar_subquery_expression'
    end

    rule model_expression
      'model_expression' #
    end

    rule type_constructor_expression
      'type_constructor_expression'
    end

    rule variable_expression
      'variable_expression'
    end

    rule expr
      sql_expression {
        def ast
          super
        end
      }
    end

    rule exprs
      expr more:(space? ',' space? more_expr:expr)* {
        def ast
          OracleSqlParser::Ast::Array[expr.ast, *more_exprs.map(&:ast)]
        end

        def more_exprs
          more.elements.map{|e| e.more_expr}
        end
      }
    end

    rule expression_list
      (
        '(' e:exprs ')' /
        e:exprs
      ) {
        def ast
          e.ast
        end
      }
    end
  end
end
