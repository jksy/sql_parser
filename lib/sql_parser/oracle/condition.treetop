module SqlParser::Oracle
  grammar Condition
    # where
    rule where_clause
      where_keyword space? logical_condition {
        def ast
          SqlParser::Ast::WhereClause[:condition => logical_condition.ast]
        end
      }
    end

    rule condition
      comparision_condition /
      floating_point_condition /
      model_condition /
      mutiset_condition /
      pattern_maching_condition /
      range_condition /
      null_condition /
      xml_condition /
      compound_condition /
      between_condition /
      exists_condition /
      in_condition /
      is_of_type_condition {
          def ast
            super
          end
        }
    end

    rule logical_condition
      (
        op:not_keyword space? right:condition /
        left:condition space? op:and_keyword space? right:condition /
        left:condition space? op:or_keyword space? right:condition  /
        cond:condition
      ) {
        def ast
          if respond_to? :op
            if respond_to? :left
              SqlParser::Ast::LogicalCondition[:left => left.ast,
                                               :op => op.ast,
                                               :right => right.ast]
            else
              SqlParser::Ast::LogicalCondition[:op => op.ast,
                                               :right => right.ast]
            end
          else
            cond.ast
          end
        end
      }
    end

    rule comparision_condition
      (
        simple_comparision_condition /
        group_comparision_condition
      ) {
        def ast
          super
        end
      }
    end

    rule group_comparision_condition
      'group_comparision_condition'
    end

    rule simple_comparision_condition
      (
        left:expr space? op:('!=' / '^=' / '<>' / '>=' / '<=' / '=' / '>' / '<') space? right:expr /
        '(' space? left:exprs space? ')' op:space? ('!=' / '^=' / '<>' / '=') space? '(' space? right:subquery space? ')'
      ) {
        def ast
          SqlParser::Ast::SimpleComparisionCondition[:left => left.ast,
                                                     :op => op.text_value,
                                                     :right => right.ast]
        end
      }
    end

    rule floating_point_condition
      'floating_point_condition'
    end

    rule model_condition
      'model_condition'
    end

    rule mutiset_condition
      'mutiset_condition'
    end

    rule pattern_maching_condition
      (
        like_condition /
        regexp_like_condition
      ) {
        def ast
          super
        end
      }
    end

    rule like_condition
      target:ident space
      n:(not_keyword:not_keyword space)?
      like:(like_keyword / like2_keyword / like4_keyword / likec_keyword) space
      text:text_literal
      e:(space escape_keyword space escape_text:text_literal)? {
        def ast
          SqlParser::Ast::LikeCondition[:target => target.ast,
                                        :not => not_keyword.ast,
                                        :like => like.ast,
                                        :text => text.ast,
                                        :escape => escape_text.ast]
        end

        def not_keyword
          n.elements && n.elements.first
        end

        def escape_text
          if e.respond_to? :escape_text
            e.escape_text
          end
        end
      }
    end

    rule regexp_like_condition
      regexp_like_keyword '(' space? target:ident space? ',' space? regexp:text_literal space? ')' {
        def ast
          SqlParser::Ast::RegexpCondition[:target => target.ast,
                                          :regexp => regexp.ast]
        end
      }
    end

    rule range_condition
      'range_condition'
    end

    rule null_condition
      expr space is_keyword space n:(not_keyword space)? null_keyword {
        def ast
          SqlParser::Ast::NullCondition[:target => expr.ast,
                                        :not => not_keyword.ast]
        end

        def not_keyword
          n.elements && n.elements.first
        end
      }
    end

    rule xml_condition
      'xml_condition'
    end

    rule compound_condition
      '(' logical_condition ')' {
        def ast
          logical_condition.ast
        end
      }
    end

    rule between_condition
      target:expr space n:(not_keyword space)? between_keyword space from:expr space and_keyword space to:expr {
        def ast
          SqlParser::Ast::BetweenCondition[
            :target => target.ast,
            :not => not_keyword.ast,
            :from => from.ast,
            :to => to.ast
          ]
        end

        def not_keyword
          n.elements && n.elements.first
        end
      }
    end

    rule exists_condition
      exists_keyword space? '(' space? subquery space? ')' {
        def ast
          SqlParser::Ast::ExistsCondition[
            :target => subquery.ast
          ]
        end
      }
    end

    rule in_condition
      target:expr space n:(not_keyword space)? in_keyword space? '(' space? values:( exprs / subquery ) space? ')' {
        def ast
          SqlParser::Ast::InCondition[
            :target => target.ast,
            :not => not_keyword.ast,
            :values =>  values.ast
          ]
        end

        def not_keyword
          n.elements && n.elements.first
        end
      }
    end

    rule is_of_type_condition
      'is_of_type_condition'
    end
  end
end
