module SqlParser::Oracle
  grammar Expression
    rule sql_expression
      function_expression /
      case_expression /
      cursor_expression /
      compound_expression /
      datetime_expression /
      interval_expression /
      object_access_expression /
      scalar_subquery_expression /
      model_expression /
      type_constructor_expression /
      simple_expression /
      variable_expression {
        def ast
          super
        end
      }
    end

    rule simple_expression
      (
        rownum_keyword /
        sysdate_keyword /
        systimestamp_keyword /
        null_keyword /
        text_literal /
        number_literal /
        sequence /
        simple_expression_column
      ) {
        def ast
          super
        end
      }
    end

    rule simple_expression_column
      name:(
        ( schema_name space? '.' space? table_name '.' / table_name space? '.' space? )?
        ( rowid_keyword / column_name )
      ) {
        def ast
          SqlParser::Ast::Identifier.new(:name => text_value)
        end
      }
    end

    rule compound_expression
      'compound_expression' # not implemented
#      (
#        ('+' / '-' / prior_keyword) space? expr /
#        (expr space? ('||' / '*' / '/' / '+' / '-') space? expr) /
#        '(' space? expr space? ')'
#      )
    end

    rule case_expression
      case_keyword space? (simple_case_expression / searched_case_expression) space?
      else_clause? space? end_keyword {
        def ast
          'case_expression'
        end
      }
    end

    rule simple_case_expression
      expr space (when_keyword space comparison_expr space then_keyword space? return_expr space?)+ {
        def ast
          'simple_case_expression'
        end
      }
    end

    rule comparison_expr
      expr {
        def ast
          super
        end
      }
    end

    rule return_expr
      expr {
        def ast
          super
        end
      }
    end

    rule else_expr
      expr {
        def ast
          super
        end
      }
    end

    rule searched_case_expression
      when_keyword space? condition space? then_keyword space? return_expr {
        def ast
          'searched_case_expression'
        end
      }
    end

    rule else_clause
      else_keyword space? else_expr {
        def ast
          'else_clause'
        end
      }
    end
    
    rule cursor_expression
      'cursor_expression' # not implemented
    end

    rule datetime_expression
      'datetime_expression' # not implemented
    end

    rule function_expression
      function_name space? '(' space? function_args? space? ')' {
        def ast
          'function_expression'
        end
      }
    end

    rule function_name
      (
        package_name '.' procedure_name /
        procedure_name 
      ) {
        def ast
          super
        end
      }
    end

    rule function_args
      function_arg ( space? ',' space? function_arg )* {
        def ast
          'function_args'
        end
      }
    end

    rule function_arg
      expr {
        def ast
          super
        end
      }
    end

    rule interval_expression
      'interval_expression' # not implemented
    end

    rule object_access_expression
      'object_access_expression'
    end

    rule scalar_subquery_expression
      'scalar_subquery_expression'
    end

    rule model_expression
      'model_expression' #
    end

    rule type_constructor_expression
      'type_constructor_expression'
    end

    rule variable_expression
      'variable_expression'
    end

    rule expr
      sql_expression {
        def ast
          super
        end
      }
    end

    rule exprs
      expr more:(space? ',' space? more_expr:expr)* {
        def ast
          SqlParser::Ast::Base[[expr.ast] + more_exprs.map(&:ast)]
        end

        def more_exprs
          more.elements.map{|e| e.more_expr}
        end
      }
    end

    rule expression_list
      (
        '(' e:exprs ')' /
        e:exprs
      ) {
        def ast
          e.ast
        end
      }
    end
  end
end
