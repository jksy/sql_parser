# Autogenerated from a Treetop grammar. Edits may be lost.


module SqlParser
  module Oracle
    include Treetop::Runtime

    def root
      @root ||= :sql
    end

    include OracleReservedWord

    module Sql0
      def q
        elements[1]
      end
    end

    module Sql1
      def ast
        q.ast
      end
    end

    def _nt_sql
      start_index = index
      if node_cache[:sql].has_key?(index)
        cached = node_cache[:sql][index]
        if cached
          node_cache[:sql][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      r2 = _nt_space
      if r2
        r1 = r2
      else
        r1 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r1
      if r1
        r3 = _nt_select_query
        s0 << r3
      end
      if s0.last
        r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
        r0.extend(Sql0)
        r0.extend(Sql1)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:sql][start_index] = r0

      r0
    end

    module SelectQuery0
      def subquery
        elements[0]
      end

    end

    module SelectQuery1
      def ast
        subquery.ast
      end
    end

    def _nt_select_query
      start_index = index
      if node_cache[:select_query].has_key?(index)
        cached = node_cache[:select_query][index]
        if cached
          node_cache[:select_query][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      r1 = _nt_subquery
      s0 << r1
      if r1
        r3 = _nt_for_update_clause
        if r3
          r2 = r3
        else
          r2 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r2
      end
      if s0.last
        r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
        r0.extend(SelectQuery0)
        r0.extend(SelectQuery1)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:select_query][start_index] = r0

      r0
    end

    module Subquery0
      def query_block
        elements[0]
      end

      def order_by_clause
        elements[1]
      end
    end

    module Subquery1
      def ast
        query_block.ast
      end
    end

    def _nt_subquery
      start_index = index
      if node_cache[:subquery].has_key?(index)
        cached = node_cache[:subquery][index]
        if cached
          node_cache[:subquery][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      r1 = _nt_query_block
      s0 << r1
      if r1
        r3 = _nt_order_by_clause
        if r3
          r2 = r3
        else
          r2 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r2
      end
      if s0.last
        r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
        r0.extend(Subquery0)
        r0.extend(Subquery1)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:subquery][start_index] = r0

      r0
    end

    module QueryBlock0
      def select_keyword
        elements[2]
      end

      def select_list
        elements[6]
      end

      def from_keyword
        elements[8]
      end

      def select_sources
        elements[10]
      end

    end

    def _nt_query_block
      start_index = index
      if node_cache[:query_block].has_key?(index)
        cached = node_cache[:query_block][index]
        if cached
          node_cache[:query_block][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      r2 = _nt_subquery_factoring_clause
      if r2
        r1 = r2
      else
        r1 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r1
      if r1
        r4 = _nt_space
        if r4
          r3 = r4
        else
          r3 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r3
        if r3
          r5 = _nt_select_keyword
          s0 << r5
          if r5
            r7 = _nt_hint
            if r7
              r6 = r7
            else
              r6 = instantiate_node(SyntaxNode,input, index...index)
            end
            s0 << r6
            if r6
              r9 = _nt_all_keyword
              if r9
                r8 = r9
              else
                r8 = instantiate_node(SyntaxNode,input, index...index)
              end
              s0 << r8
              if r8
                r11 = _nt_space
                if r11
                  r10 = r11
                else
                  r10 = instantiate_node(SyntaxNode,input, index...index)
                end
                s0 << r10
                if r10
                  r12 = _nt_select_list
                  s0 << r12
                  if r12
                    r14 = _nt_space
                    if r14
                      r13 = r14
                    else
                      r13 = instantiate_node(SyntaxNode,input, index...index)
                    end
                    s0 << r13
                    if r13
                      r15 = _nt_from_keyword
                      s0 << r15
                      if r15
                        r17 = _nt_space
                        if r17
                          r16 = r17
                        else
                          r16 = instantiate_node(SyntaxNode,input, index...index)
                        end
                        s0 << r16
                        if r16
                          r18 = _nt_select_sources
                          s0 << r18
                          if r18
                            r20 = _nt_space
                            if r20
                              r19 = r20
                            else
                              r19 = instantiate_node(SyntaxNode,input, index...index)
                            end
                            s0 << r19
                            if r19
                              r22 = _nt_where_clause
                              if r22
                                r21 = r22
                              else
                                r21 = instantiate_node(SyntaxNode,input, index...index)
                              end
                              s0 << r21
                              if r21
                                r24 = _nt_space
                                if r24
                                  r23 = r24
                                else
                                  r23 = instantiate_node(SyntaxNode,input, index...index)
                                end
                                s0 << r23
                                if r23
                                  r26 = _nt_group_by_clause
                                  if r26
                                    r25 = r26
                                  else
                                    r25 = instantiate_node(SyntaxNode,input, index...index)
                                  end
                                  s0 << r25
                                  if r25
                                    r28 = _nt_space
                                    if r28
                                      r27 = r28
                                    else
                                      r27 = instantiate_node(SyntaxNode,input, index...index)
                                    end
                                    s0 << r27
                                    if r27
                                      r30 = _nt_model_clause
                                      if r30
                                        r29 = r30
                                      else
                                        r29 = instantiate_node(SyntaxNode,input, index...index)
                                      end
                                      s0 << r29
                                      if r29
                                        r32 = _nt_space
                                        if r32
                                          r31 = r32
                                        else
                                          r31 = instantiate_node(SyntaxNode,input, index...index)
                                        end
                                        s0 << r31
                                      end
                                    end
                                  end
                                end
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
      if s0.last
        r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
        r0.extend(QueryBlock0)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:query_block][start_index] = r0

      r0
    end

    module Ident0
    end

    def _nt_ident
      start_index = index
      if node_cache[:ident].has_key?(index)
        cached = node_cache[:ident][index]
        if cached
          node_cache[:ident][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      i1 = index
      r2 = _nt_keyword
      if r2
        @index = i1
        r1 = nil
      else
        @index = i1
        r1 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r1
      if r1
        if has_terminal?(@regexps[gr = '\A[a-zA-Z]'] ||= Regexp.new(gr), :regexp, index)
          r3 = true
          @index += 1
        else
          terminal_parse_failure('[a-zA-Z]')
          r3 = nil
        end
        s0 << r3
        if r3
          s4, i4 = [], index
          loop do
            if has_terminal?(@regexps[gr = '\A[a-zA-Z0-9]'] ||= Regexp.new(gr), :regexp, index)
              r5 = true
              @index += 1
            else
              terminal_parse_failure('[a-zA-Z0-9]')
              r5 = nil
            end
            if r5
              s4 << r5
            else
              break
            end
          end
          r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
          s0 << r4
        end
      end
      if s0.last
        r0 = instantiate_node(Identifier,input, i0...index, s0)
        r0.extend(Ident0)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:ident][start_index] = r0

      r0
    end

    def _nt_space
      start_index = index
      if node_cache[:space].has_key?(index)
        cached = node_cache[:space][index]
        if cached
          node_cache[:space][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      s0, i0 = [], index
      loop do
        if (match_len = has_terminal?(' ', false, index))
          r1 = true
          @index += match_len
        else
          terminal_parse_failure('\' \'')
          r1 = nil
        end
        if r1
          s0 << r1
        else
          break
        end
      end
      if s0.empty?
        @index = i0
        r0 = nil
      else
        r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      end

      node_cache[:space][start_index] = r0

      r0
    end

    module ForUpdateClause0
      # not implemented
    end

    def _nt_for_update_clause
      start_index = index
      if node_cache[:for_update_clause].has_key?(index)
        cached = node_cache[:for_update_clause][index]
        if cached
          node_cache[:for_update_clause][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      if (match_len = has_terminal?('for_update_clause', false, index))
        r0 = instantiate_node(SyntaxNode,input, index...(index + match_len))
        r0.extend(ForUpdateClause0)
        @index += match_len
      else
        terminal_parse_failure('\'for_update_clause\'')
        r0 = nil
      end

      node_cache[:for_update_clause][start_index] = r0

      r0
    end

    module SubqueryFactoringClause0
      # not implemented
    end

    def _nt_subquery_factoring_clause
      start_index = index
      if node_cache[:subquery_factoring_clause].has_key?(index)
        cached = node_cache[:subquery_factoring_clause][index]
        if cached
          node_cache[:subquery_factoring_clause][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      if (match_len = has_terminal?('subquery_factoring_clause', false, index))
        r0 = instantiate_node(SyntaxNode,input, index...(index + match_len))
        r0.extend(SubqueryFactoringClause0)
        @index += match_len
      else
        terminal_parse_failure('\'subquery_factoring_clause\'')
        r0 = nil
      end

      node_cache[:subquery_factoring_clause][start_index] = r0

      r0
    end

    module OrderByClause0
      # not implemented
    end

    def _nt_order_by_clause
      start_index = index
      if node_cache[:order_by_clause].has_key?(index)
        cached = node_cache[:order_by_clause][index]
        if cached
          node_cache[:order_by_clause][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      if (match_len = has_terminal?('order_by_clause', false, index))
        r0 = instantiate_node(SyntaxNode,input, index...(index + match_len))
        r0.extend(OrderByClause0)
        @index += match_len
      else
        terminal_parse_failure('\'order_by_clause\'')
        r0 = nil
      end

      node_cache[:order_by_clause][start_index] = r0

      r0
    end

    module Hint0
    end

    module Hint1
      def ast
        nil
      end
    end

    def _nt_hint
      start_index = index
      if node_cache[:hint].has_key?(index)
        cached = node_cache[:hint][index]
        if cached
          node_cache[:hint][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      if (match_len = has_terminal?('/*+', false, index))
        r1 = instantiate_node(SyntaxNode,input, index...(index + match_len))
        @index += match_len
      else
        terminal_parse_failure('\'/*+\'')
        r1 = nil
      end
      s0 << r1
      if r1
        if (match_len = has_terminal?('*/', false, index))
          r2 = instantiate_node(SyntaxNode,input, index...(index + match_len))
          @index += match_len
        else
          terminal_parse_failure('\'*/\'')
          r2 = nil
        end
        s0 << r2
      end
      if s0.last
        r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
        r0.extend(Hint0)
        r0.extend(Hint1)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:hint][start_index] = r0

      r0
    end

    module SelectList0
      def c
        elements[3]
      end

    end

    module SelectList1
      def select_one_column
        elements[0]
      end

      def more_list
        elements[1]
      end
    end

    module SelectList2
      def ast
        [select_one_column, *more_columns].flatten
      end

      def more_columns
        more_list.elements.map(&:c)
      end
    end

    def _nt_select_list
      start_index = index
      if node_cache[:select_list].has_key?(index)
        cached = node_cache[:select_list][index]
        if cached
          node_cache[:select_list][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      r1 = _nt_select_one_column
      s0 << r1
      if r1
        s2, i2 = [], index
        loop do
          i3, s3 = index, []
          r5 = _nt_space
          if r5
            r4 = r5
          else
            r4 = instantiate_node(SyntaxNode,input, index...index)
          end
          s3 << r4
          if r4
            if (match_len = has_terminal?(',', false, index))
              r6 = true
              @index += match_len
            else
              terminal_parse_failure('\',\'')
              r6 = nil
            end
            s3 << r6
            if r6
              r8 = _nt_space
              if r8
                r7 = r8
              else
                r7 = instantiate_node(SyntaxNode,input, index...index)
              end
              s3 << r7
              if r7
                r9 = _nt_select_one_column
                s3 << r9
                if r9
                  r11 = _nt_space
                  if r11
                    r10 = r11
                  else
                    r10 = instantiate_node(SyntaxNode,input, index...index)
                  end
                  s3 << r10
                end
              end
            end
          end
          if s3.last
            r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
            r3.extend(SelectList0)
          else
            @index = i3
            r3 = nil
          end
          if r3
            s2 << r3
          else
            break
          end
        end
        r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
        s0 << r2
      end
      if s0.last
        r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
        r0.extend(SelectList1)
        r0.extend(SelectList2)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:select_list][start_index] = r0

      r0
    end

    module SelectOneColumn0
      def ast
        self.elements.first
      end
    end

    def _nt_select_one_column
      start_index = index
      if node_cache[:select_one_column].has_key?(index)
        cached = node_cache[:select_one_column][index]
        if cached
          node_cache[:select_one_column][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0 = index
      r1 = _nt_select_table
      if r1
        r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
        r0 = r1
        r0.extend(SelectOneColumn0)
      else
        r2 = _nt_select_column
        if r2
          r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
          r0 = r2
          r0.extend(SelectOneColumn0)
        else
          r3 = _nt_expr
          if r3
            r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
            r0 = r3
            r0.extend(SelectOneColumn0)
          else
            @index = i0
            r0 = nil
          end
        end
      end

      node_cache[:select_one_column][start_index] = r0

      r0
    end

    module SelectTable0
      def table_name
        elements[0]
      end

    end

    module SelectTable1
    end

    def _nt_select_table
      start_index = index
      if node_cache[:select_table].has_key?(index)
        cached = node_cache[:select_table][index]
        if cached
          node_cache[:select_table][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      i2, s2 = index, []
      r3 = _nt_table_name
      s2 << r3
      if r3
        if (match_len = has_terminal?('.', false, index))
          r4 = true
          @index += match_len
        else
          terminal_parse_failure('\'.\'')
          r4 = nil
        end
        s2 << r4
      end
      if s2.last
        r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
        r2.extend(SelectTable0)
      else
        @index = i2
        r2 = nil
      end
      if r2
        r1 = r2
      else
        r1 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r1
      if r1
        if (match_len = has_terminal?('*', false, index))
          r5 = true
          @index += match_len
        else
          terminal_parse_failure('\'*\'')
          r5 = nil
        end
        s0 << r5
      end
      if s0.last
        r0 = instantiate_node(Identifier,input, i0...index, s0)
        r0.extend(SelectTable1)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:select_table][start_index] = r0

      r0
    end

    module SelectColumn0
      def as_keyword
        elements[0]
      end

      def space
        elements[1]
      end
    end

    module SelectColumn1
      def space
        elements[0]
      end

      def c_alias
        elements[2]
      end
    end

    module SelectColumn2
      def expr
        elements[0]
      end

    end

    module SelectColumn3
      def ast
        [expr, as, c_alias]
      end
    end

    def _nt_select_column
      start_index = index
      if node_cache[:select_column].has_key?(index)
        cached = node_cache[:select_column][index]
        if cached
          node_cache[:select_column][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      r1 = _nt_expr
      s0 << r1
      if r1
        i3, s3 = index, []
        r4 = _nt_space
        s3 << r4
        if r4
          i6, s6 = index, []
          r7 = _nt_as_keyword
          s6 << r7
          if r7
            r8 = _nt_space
            s6 << r8
          end
          if s6.last
            r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
            r6.extend(SelectColumn0)
          else
            @index = i6
            r6 = nil
          end
          if r6
            r5 = r6
          else
            r5 = instantiate_node(SyntaxNode,input, index...index)
          end
          s3 << r5
          if r5
            r9 = _nt_c_alias
            s3 << r9
          end
        end
        if s3.last
          r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
          r3.extend(SelectColumn1)
        else
          @index = i3
          r3 = nil
        end
        if r3
          r2 = r3
        else
          r2 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r2
      end
      if s0.last
        r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
        r0.extend(SelectColumn2)
        r0.extend(SelectColumn3)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:select_column][start_index] = r0

      r0
    end

    def _nt_t_alias
      start_index = index
      if node_cache[:t_alias].has_key?(index)
        cached = node_cache[:t_alias][index]
        if cached
          node_cache[:t_alias][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      r0 = _nt_ident

      node_cache[:t_alias][start_index] = r0

      r0
    end

    def _nt_c_alias
      start_index = index
      if node_cache[:c_alias].has_key?(index)
        cached = node_cache[:c_alias][index]
        if cached
          node_cache[:c_alias][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      r0 = _nt_ident

      node_cache[:c_alias][start_index] = r0

      r0
    end

    def _nt_expr
      start_index = index
      if node_cache[:expr].has_key?(index)
        cached = node_cache[:expr][index]
        if cached
          node_cache[:expr][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0 = index
      r1 = _nt_ident
      if r1
        r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
        r0 = r1
      else
        r2 = _nt_text_literal
        if r2
          r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
          r0 = r2
        else
          r3 = _nt_number_literal
          if r3
            r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
            r0 = r3
          else
            @index = i0
            r0 = nil
          end
        end
      end

      node_cache[:expr][start_index] = r0

      r0
    end

    module Exprs0
      def expr
        elements[3]
      end
    end

    module Exprs1
      def expr
        elements[0]
      end

    end

    def _nt_exprs
      start_index = index
      if node_cache[:exprs].has_key?(index)
        cached = node_cache[:exprs][index]
        if cached
          node_cache[:exprs][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      r1 = _nt_expr
      s0 << r1
      if r1
        s2, i2 = [], index
        loop do
          i3, s3 = index, []
          r5 = _nt_space
          if r5
            r4 = r5
          else
            r4 = instantiate_node(SyntaxNode,input, index...index)
          end
          s3 << r4
          if r4
            if (match_len = has_terminal?(',', false, index))
              r6 = true
              @index += match_len
            else
              terminal_parse_failure('\',\'')
              r6 = nil
            end
            s3 << r6
            if r6
              r8 = _nt_space
              if r8
                r7 = r8
              else
                r7 = instantiate_node(SyntaxNode,input, index...index)
              end
              s3 << r7
              if r7
                r9 = _nt_expr
                s3 << r9
              end
            end
          end
          if s3.last
            r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
            r3.extend(Exprs0)
          else
            @index = i3
            r3 = nil
          end
          if r3
            s2 << r3
          else
            break
          end
        end
        r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
        s0 << r2
      end
      if s0.last
        r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
        r0.extend(Exprs1)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:exprs][start_index] = r0

      r0
    end

    def _nt_table_name
      start_index = index
      if node_cache[:table_name].has_key?(index)
        cached = node_cache[:table_name][index]
        if cached
          node_cache[:table_name][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      r0 = _nt_ident

      node_cache[:table_name][start_index] = r0

      r0
    end

    def _nt_column_name
      start_index = index
      if node_cache[:column_name].has_key?(index)
        cached = node_cache[:column_name][index]
        if cached
          node_cache[:column_name][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      r0 = _nt_ident

      node_cache[:column_name][start_index] = r0

      r0
    end

    def _nt_schema_name
      start_index = index
      if node_cache[:schema_name].has_key?(index)
        cached = node_cache[:schema_name][index]
        if cached
          node_cache[:schema_name][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      r0 = _nt_ident

      node_cache[:schema_name][start_index] = r0

      r0
    end

    def _nt_select_sources
      start_index = index
      if node_cache[:select_sources].has_key?(index)
        cached = node_cache[:select_sources][index]
        if cached
          node_cache[:select_sources][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      r0 = _nt_ident

      node_cache[:select_sources][start_index] = r0

      r0
    end

    module NumberLiteral0
    end

    module NumberLiteral1
    end

    def _nt_number_literal
      start_index = index
      if node_cache[:number_literal].has_key?(index)
        cached = node_cache[:number_literal][index]
        if cached
          node_cache[:number_literal][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      if (match_len = has_terminal?('-', false, index))
        r2 = true
        @index += match_len
      else
        terminal_parse_failure('\'-\'')
        r2 = nil
      end
      if r2
        r1 = r2
      else
        r1 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r1
      if r1
        s3, i3 = [], index
        loop do
          if has_terminal?(@regexps[gr = '\A[0-9]'] ||= Regexp.new(gr), :regexp, index)
            r4 = true
            @index += 1
          else
            terminal_parse_failure('[0-9]')
            r4 = nil
          end
          if r4
            s3 << r4
          else
            break
          end
        end
        if s3.empty?
          @index = i3
          r3 = nil
        else
          r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
        end
        s0 << r3
        if r3
          i6, s6 = index, []
          if has_terminal?(@regexps[gr = '\A[.]'] ||= Regexp.new(gr), :regexp, index)
            r7 = true
            @index += 1
          else
            terminal_parse_failure('[.]')
            r7 = nil
          end
          s6 << r7
          if r7
            s8, i8 = [], index
            loop do
              if has_terminal?(@regexps[gr = '\A[0-9]'] ||= Regexp.new(gr), :regexp, index)
                r9 = true
                @index += 1
              else
                terminal_parse_failure('[0-9]')
                r9 = nil
              end
              if r9
                s8 << r9
              else
                break
              end
            end
            if s8.empty?
              @index = i8
              r8 = nil
            else
              r8 = instantiate_node(SyntaxNode,input, i8...index, s8)
            end
            s6 << r8
          end
          if s6.last
            r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
            r6.extend(NumberLiteral0)
          else
            @index = i6
            r6 = nil
          end
          if r6
            r5 = r6
          else
            r5 = instantiate_node(SyntaxNode,input, index...index)
          end
          s0 << r5
        end
      end
      if s0.last
        r0 = instantiate_node(NumberLiteral,input, i0...index, s0)
        r0.extend(NumberLiteral1)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:number_literal][start_index] = r0

      r0
    end

    module TextLiteral0
    end

    module TextLiteral1
    end

    def _nt_text_literal
      start_index = index
      if node_cache[:text_literal].has_key?(index)
        cached = node_cache[:text_literal][index]
        if cached
          node_cache[:text_literal][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      if (match_len = has_terminal?("'", false, index))
        r1 = true
        @index += match_len
      else
        terminal_parse_failure('"\'"')
        r1 = nil
      end
      s0 << r1
      if r1
        s2, i2 = [], index
        loop do
          i3 = index
          if (match_len = has_terminal?("\\'", false, index))
            r4 = instantiate_node(SyntaxNode,input, index...(index + match_len))
            @index += match_len
          else
            terminal_parse_failure('"\\\\\'"')
            r4 = nil
          end
          if r4
            r4 = SyntaxNode.new(input, (index-1)...index) if r4 == true
            r3 = r4
          else
            i5, s5 = index, []
            i6 = index
            if (match_len = has_terminal?("'", false, index))
              r7 = true
              @index += match_len
            else
              terminal_parse_failure('"\'"')
              r7 = nil
            end
            if r7
              @index = i6
              r6 = nil
              terminal_parse_failure('"\'"', true)
            else
              terminal_failures.pop
              @index = i6
              r6 = instantiate_node(SyntaxNode,input, index...index)
            end
            s5 << r6
            if r6
              if index < input_length
                r8 = true
                @index += 1
              else
                terminal_parse_failure("any character")
                r8 = nil
              end
              s5 << r8
            end
            if s5.last
              r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
              r5.extend(TextLiteral0)
            else
              @index = i5
              r5 = nil
            end
            if r5
              r5 = SyntaxNode.new(input, (index-1)...index) if r5 == true
              r3 = r5
            else
              @index = i3
              r3 = nil
            end
          end
          if r3
            s2 << r3
          else
            break
          end
        end
        r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
        s0 << r2
        if r2
          if (match_len = has_terminal?("'", false, index))
            r9 = true
            @index += match_len
          else
            terminal_parse_failure('"\'"')
            r9 = nil
          end
          s0 << r9
        end
      end
      if s0.last
        r0 = instantiate_node(TextLiteral,input, i0...index, s0)
        r0.extend(TextLiteral1)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:text_literal][start_index] = r0

      r0
    end

    module WhereClause0
      def where_keyword
        elements[0]
      end

      def logical_condition
        elements[2]
      end
    end

    def _nt_where_clause
      start_index = index
      if node_cache[:where_clause].has_key?(index)
        cached = node_cache[:where_clause][index]
        if cached
          node_cache[:where_clause][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      r1 = _nt_where_keyword
      s0 << r1
      if r1
        r3 = _nt_space
        if r3
          r2 = r3
        else
          r2 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r2
        if r2
          r4 = _nt_logical_condition
          s0 << r4
        end
      end
      if s0.last
        r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
        r0.extend(WhereClause0)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:where_clause][start_index] = r0

      r0
    end

    def _nt_condition
      start_index = index
      if node_cache[:condition].has_key?(index)
        cached = node_cache[:condition][index]
        if cached
          node_cache[:condition][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0 = index
      r1 = _nt_comparision_condition
      if r1
        r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
        r0 = r1
      else
        r2 = _nt_floating_point_condition
        if r2
          r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
          r0 = r2
        else
          r3 = _nt_model_condition
          if r3
            r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
            r0 = r3
          else
            r4 = _nt_mutiset_condition
            if r4
              r4 = SyntaxNode.new(input, (index-1)...index) if r4 == true
              r0 = r4
            else
              r5 = _nt_pattern_maching_condition
              if r5
                r5 = SyntaxNode.new(input, (index-1)...index) if r5 == true
                r0 = r5
              else
                r6 = _nt_range_condition
                if r6
                  r6 = SyntaxNode.new(input, (index-1)...index) if r6 == true
                  r0 = r6
                else
                  r7 = _nt_null_condition
                  if r7
                    r7 = SyntaxNode.new(input, (index-1)...index) if r7 == true
                    r0 = r7
                  else
                    r8 = _nt_xml_condition
                    if r8
                      r8 = SyntaxNode.new(input, (index-1)...index) if r8 == true
                      r0 = r8
                    else
                      r9 = _nt_compound_condition
                      if r9
                        r9 = SyntaxNode.new(input, (index-1)...index) if r9 == true
                        r0 = r9
                      else
                        r10 = _nt_between_condition
                        if r10
                          r10 = SyntaxNode.new(input, (index-1)...index) if r10 == true
                          r0 = r10
                        else
                          r11 = _nt_exists_condition
                          if r11
                            r11 = SyntaxNode.new(input, (index-1)...index) if r11 == true
                            r0 = r11
                          else
                            r12 = _nt_in_condition
                            if r12
                              r12 = SyntaxNode.new(input, (index-1)...index) if r12 == true
                              r0 = r12
                            else
                              r13 = _nt_is_of_type_condition
                              if r13
                                r13 = SyntaxNode.new(input, (index-1)...index) if r13 == true
                                r0 = r13
                              else
                                @index = i0
                                r0 = nil
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end

      node_cache[:condition][start_index] = r0

      r0
    end

    module LogicalCondition0
      def left
        elements[0]
      end

      def and_keyword
        elements[2]
      end

      def right
        elements[4]
      end
    end

    module LogicalCondition1
      def left
        elements[0]
      end

      def or_keyword
        elements[2]
      end

      def right
        elements[4]
      end
    end

    module LogicalCondition2
      def not_keyword
        elements[0]
      end

      def right
        elements[2]
      end
    end

    def _nt_logical_condition
      start_index = index
      if node_cache[:logical_condition].has_key?(index)
        cached = node_cache[:logical_condition][index]
        if cached
          node_cache[:logical_condition][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0 = index
      i1, s1 = index, []
      r2 = _nt_condition
      s1 << r2
      if r2
        r4 = _nt_space
        if r4
          r3 = r4
        else
          r3 = instantiate_node(SyntaxNode,input, index...index)
        end
        s1 << r3
        if r3
          r5 = _nt_and_keyword
          s1 << r5
          if r5
            r7 = _nt_space
            if r7
              r6 = r7
            else
              r6 = instantiate_node(SyntaxNode,input, index...index)
            end
            s1 << r6
            if r6
              r8 = _nt_condition
              s1 << r8
            end
          end
        end
      end
      if s1.last
        r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
        r1.extend(LogicalCondition0)
      else
        @index = i1
        r1 = nil
      end
      if r1
        r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
        r0 = r1
      else
        i9, s9 = index, []
        r10 = _nt_condition
        s9 << r10
        if r10
          r12 = _nt_space
          if r12
            r11 = r12
          else
            r11 = instantiate_node(SyntaxNode,input, index...index)
          end
          s9 << r11
          if r11
            r13 = _nt_or_keyword
            s9 << r13
            if r13
              r15 = _nt_space
              if r15
                r14 = r15
              else
                r14 = instantiate_node(SyntaxNode,input, index...index)
              end
              s9 << r14
              if r14
                r16 = _nt_condition
                s9 << r16
              end
            end
          end
        end
        if s9.last
          r9 = instantiate_node(SyntaxNode,input, i9...index, s9)
          r9.extend(LogicalCondition1)
        else
          @index = i9
          r9 = nil
        end
        if r9
          r9 = SyntaxNode.new(input, (index-1)...index) if r9 == true
          r0 = r9
        else
          i17, s17 = index, []
          r18 = _nt_not_keyword
          s17 << r18
          if r18
            r20 = _nt_space
            if r20
              r19 = r20
            else
              r19 = instantiate_node(SyntaxNode,input, index...index)
            end
            s17 << r19
            if r19
              r21 = _nt_condition
              s17 << r21
            end
          end
          if s17.last
            r17 = instantiate_node(SyntaxNode,input, i17...index, s17)
            r17.extend(LogicalCondition2)
          else
            @index = i17
            r17 = nil
          end
          if r17
            r17 = SyntaxNode.new(input, (index-1)...index) if r17 == true
            r0 = r17
          else
            r22 = _nt_condition
            if r22
              r22 = SyntaxNode.new(input, (index-1)...index) if r22 == true
              r0 = r22
            else
              @index = i0
              r0 = nil
            end
          end
        end
      end

      node_cache[:logical_condition][start_index] = r0

      r0
    end

    def _nt_comparision_condition
      start_index = index
      if node_cache[:comparision_condition].has_key?(index)
        cached = node_cache[:comparision_condition][index]
        if cached
          node_cache[:comparision_condition][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0 = index
      r1 = _nt_simple_comparision_conditions
      if r1
        r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
        r0 = r1
      else
        r2 = _nt_group_comparision_conditions
        if r2
          r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
          r0 = r2
        else
          @index = i0
          r0 = nil
        end
      end

      node_cache[:comparision_condition][start_index] = r0

      r0
    end

    def _nt_group_comparision_conditions
      start_index = index
      if node_cache[:group_comparision_conditions].has_key?(index)
        cached = node_cache[:group_comparision_conditions][index]
        if cached
          node_cache[:group_comparision_conditions][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      if (match_len = has_terminal?('group_comparision_conditions', false, index))
        r0 = instantiate_node(SyntaxNode,input, index...(index + match_len))
        @index += match_len
      else
        terminal_parse_failure('\'group_comparision_conditions\'')
        r0 = nil
      end

      node_cache[:group_comparision_conditions][start_index] = r0

      r0
    end

    module SimpleComparisionConditions0
      def left
        elements[0]
      end

      def right
        elements[4]
      end
    end

    module SimpleComparisionConditions1
      def left
        elements[2]
      end

      def right
        elements[10]
      end

    end

    def _nt_simple_comparision_conditions
      start_index = index
      if node_cache[:simple_comparision_conditions].has_key?(index)
        cached = node_cache[:simple_comparision_conditions][index]
        if cached
          node_cache[:simple_comparision_conditions][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0 = index
      i1, s1 = index, []
      r2 = _nt_expr
      s1 << r2
      if r2
        r4 = _nt_space
        if r4
          r3 = r4
        else
          r3 = instantiate_node(SyntaxNode,input, index...index)
        end
        s1 << r3
        if r3
          i5 = index
          if (match_len = has_terminal?('!=', false, index))
            r6 = instantiate_node(SyntaxNode,input, index...(index + match_len))
            @index += match_len
          else
            terminal_parse_failure('\'!=\'')
            r6 = nil
          end
          if r6
            r6 = SyntaxNode.new(input, (index-1)...index) if r6 == true
            r5 = r6
          else
            if (match_len = has_terminal?('^=', false, index))
              r7 = instantiate_node(SyntaxNode,input, index...(index + match_len))
              @index += match_len
            else
              terminal_parse_failure('\'^=\'')
              r7 = nil
            end
            if r7
              r7 = SyntaxNode.new(input, (index-1)...index) if r7 == true
              r5 = r7
            else
              if (match_len = has_terminal?('<>', false, index))
                r8 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                @index += match_len
              else
                terminal_parse_failure('\'<>\'')
                r8 = nil
              end
              if r8
                r8 = SyntaxNode.new(input, (index-1)...index) if r8 == true
                r5 = r8
              else
                if (match_len = has_terminal?('>=', false, index))
                  r9 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                  @index += match_len
                else
                  terminal_parse_failure('\'>=\'')
                  r9 = nil
                end
                if r9
                  r9 = SyntaxNode.new(input, (index-1)...index) if r9 == true
                  r5 = r9
                else
                  if (match_len = has_terminal?('<=', false, index))
                    r10 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                    @index += match_len
                  else
                    terminal_parse_failure('\'<=\'')
                    r10 = nil
                  end
                  if r10
                    r10 = SyntaxNode.new(input, (index-1)...index) if r10 == true
                    r5 = r10
                  else
                    if (match_len = has_terminal?('=', false, index))
                      r11 = true
                      @index += match_len
                    else
                      terminal_parse_failure('\'=\'')
                      r11 = nil
                    end
                    if r11
                      r11 = SyntaxNode.new(input, (index-1)...index) if r11 == true
                      r5 = r11
                    else
                      if (match_len = has_terminal?('>', false, index))
                        r12 = true
                        @index += match_len
                      else
                        terminal_parse_failure('\'>\'')
                        r12 = nil
                      end
                      if r12
                        r12 = SyntaxNode.new(input, (index-1)...index) if r12 == true
                        r5 = r12
                      else
                        if (match_len = has_terminal?('<', false, index))
                          r13 = true
                          @index += match_len
                        else
                          terminal_parse_failure('\'<\'')
                          r13 = nil
                        end
                        if r13
                          r13 = SyntaxNode.new(input, (index-1)...index) if r13 == true
                          r5 = r13
                        else
                          @index = i5
                          r5 = nil
                        end
                      end
                    end
                  end
                end
              end
            end
          end
          s1 << r5
          if r5
            r15 = _nt_space
            if r15
              r14 = r15
            else
              r14 = instantiate_node(SyntaxNode,input, index...index)
            end
            s1 << r14
            if r14
              r16 = _nt_expr
              s1 << r16
            end
          end
        end
      end
      if s1.last
        r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
        r1.extend(SimpleComparisionConditions0)
      else
        @index = i1
        r1 = nil
      end
      if r1
        r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
        r0 = r1
      else
        i17, s17 = index, []
        if (match_len = has_terminal?('(', false, index))
          r18 = true
          @index += match_len
        else
          terminal_parse_failure('\'(\'')
          r18 = nil
        end
        s17 << r18
        if r18
          r20 = _nt_space
          if r20
            r19 = r20
          else
            r19 = instantiate_node(SyntaxNode,input, index...index)
          end
          s17 << r19
          if r19
            r21 = _nt_exprs
            s17 << r21
            if r21
              r23 = _nt_space
              if r23
                r22 = r23
              else
                r22 = instantiate_node(SyntaxNode,input, index...index)
              end
              s17 << r22
              if r22
                if (match_len = has_terminal?(')', false, index))
                  r24 = true
                  @index += match_len
                else
                  terminal_parse_failure('\')\'')
                  r24 = nil
                end
                s17 << r24
                if r24
                  r26 = _nt_space
                  if r26
                    r25 = r26
                  else
                    r25 = instantiate_node(SyntaxNode,input, index...index)
                  end
                  s17 << r25
                  if r25
                    i27 = index
                    if (match_len = has_terminal?('!=', false, index))
                      r28 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                      @index += match_len
                    else
                      terminal_parse_failure('\'!=\'')
                      r28 = nil
                    end
                    if r28
                      r28 = SyntaxNode.new(input, (index-1)...index) if r28 == true
                      r27 = r28
                    else
                      if (match_len = has_terminal?('^=', false, index))
                        r29 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                        @index += match_len
                      else
                        terminal_parse_failure('\'^=\'')
                        r29 = nil
                      end
                      if r29
                        r29 = SyntaxNode.new(input, (index-1)...index) if r29 == true
                        r27 = r29
                      else
                        if (match_len = has_terminal?('<>', false, index))
                          r30 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                          @index += match_len
                        else
                          terminal_parse_failure('\'<>\'')
                          r30 = nil
                        end
                        if r30
                          r30 = SyntaxNode.new(input, (index-1)...index) if r30 == true
                          r27 = r30
                        else
                          if (match_len = has_terminal?('=', false, index))
                            r31 = true
                            @index += match_len
                          else
                            terminal_parse_failure('\'=\'')
                            r31 = nil
                          end
                          if r31
                            r31 = SyntaxNode.new(input, (index-1)...index) if r31 == true
                            r27 = r31
                          else
                            @index = i27
                            r27 = nil
                          end
                        end
                      end
                    end
                    s17 << r27
                    if r27
                      r33 = _nt_space
                      if r33
                        r32 = r33
                      else
                        r32 = instantiate_node(SyntaxNode,input, index...index)
                      end
                      s17 << r32
                      if r32
                        if (match_len = has_terminal?('(', false, index))
                          r34 = true
                          @index += match_len
                        else
                          terminal_parse_failure('\'(\'')
                          r34 = nil
                        end
                        s17 << r34
                        if r34
                          r36 = _nt_space
                          if r36
                            r35 = r36
                          else
                            r35 = instantiate_node(SyntaxNode,input, index...index)
                          end
                          s17 << r35
                          if r35
                            r37 = _nt_subquery
                            s17 << r37
                            if r37
                              r39 = _nt_space
                              if r39
                                r38 = r39
                              else
                                r38 = instantiate_node(SyntaxNode,input, index...index)
                              end
                              s17 << r38
                              if r38
                                if (match_len = has_terminal?(')', false, index))
                                  r40 = true
                                  @index += match_len
                                else
                                  terminal_parse_failure('\')\'')
                                  r40 = nil
                                end
                                s17 << r40
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
        if s17.last
          r17 = instantiate_node(SyntaxNode,input, i17...index, s17)
          r17.extend(SimpleComparisionConditions1)
        else
          @index = i17
          r17 = nil
        end
        if r17
          r17 = SyntaxNode.new(input, (index-1)...index) if r17 == true
          r0 = r17
        else
          @index = i0
          r0 = nil
        end
      end

      node_cache[:simple_comparision_conditions][start_index] = r0

      r0
    end

    def _nt_floating_point_condition
      start_index = index
      if node_cache[:floating_point_condition].has_key?(index)
        cached = node_cache[:floating_point_condition][index]
        if cached
          node_cache[:floating_point_condition][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      if (match_len = has_terminal?('floating_point_condition', false, index))
        r0 = instantiate_node(SyntaxNode,input, index...(index + match_len))
        @index += match_len
      else
        terminal_parse_failure('\'floating_point_condition\'')
        r0 = nil
      end

      node_cache[:floating_point_condition][start_index] = r0

      r0
    end

    def _nt_model_condition
      start_index = index
      if node_cache[:model_condition].has_key?(index)
        cached = node_cache[:model_condition][index]
        if cached
          node_cache[:model_condition][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      if (match_len = has_terminal?('model_condition', false, index))
        r0 = instantiate_node(SyntaxNode,input, index...(index + match_len))
        @index += match_len
      else
        terminal_parse_failure('\'model_condition\'')
        r0 = nil
      end

      node_cache[:model_condition][start_index] = r0

      r0
    end

    def _nt_mutiset_condition
      start_index = index
      if node_cache[:mutiset_condition].has_key?(index)
        cached = node_cache[:mutiset_condition][index]
        if cached
          node_cache[:mutiset_condition][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      if (match_len = has_terminal?('mutiset_condition', false, index))
        r0 = instantiate_node(SyntaxNode,input, index...(index + match_len))
        @index += match_len
      else
        terminal_parse_failure('\'mutiset_condition\'')
        r0 = nil
      end

      node_cache[:mutiset_condition][start_index] = r0

      r0
    end

    def _nt_pattern_maching_condition
      start_index = index
      if node_cache[:pattern_maching_condition].has_key?(index)
        cached = node_cache[:pattern_maching_condition][index]
        if cached
          node_cache[:pattern_maching_condition][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0 = index
      r1 = _nt_like_condition
      if r1
        r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
        r0 = r1
      else
        r2 = _nt_regexp_like_condition
        if r2
          r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
          r0 = r2
        else
          @index = i0
          r0 = nil
        end
      end

      node_cache[:pattern_maching_condition][start_index] = r0

      r0
    end

    module LikeCondition0
      def not_keyword
        elements[0]
      end

      def space
        elements[1]
      end
    end

    module LikeCondition1
      def space1
        elements[0]
      end

      def escape_keyword
        elements[1]
      end

      def space2
        elements[2]
      end

      def text_literal
        elements[3]
      end
    end

    module LikeCondition2
      def ident
        elements[0]
      end

      def space1
        elements[1]
      end

      def space2
        elements[4]
      end

      def text_literal
        elements[5]
      end

    end

    def _nt_like_condition
      start_index = index
      if node_cache[:like_condition].has_key?(index)
        cached = node_cache[:like_condition][index]
        if cached
          node_cache[:like_condition][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      r1 = _nt_ident
      s0 << r1
      if r1
        r2 = _nt_space
        s0 << r2
        if r2
          i4, s4 = index, []
          r5 = _nt_not_keyword
          s4 << r5
          if r5
            r6 = _nt_space
            s4 << r6
          end
          if s4.last
            r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
            r4.extend(LikeCondition0)
          else
            @index = i4
            r4 = nil
          end
          if r4
            r3 = r4
          else
            r3 = instantiate_node(SyntaxNode,input, index...index)
          end
          s0 << r3
          if r3
            i7 = index
            r8 = _nt_like_keyword
            if r8
              r8 = SyntaxNode.new(input, (index-1)...index) if r8 == true
              r7 = r8
            else
              r9 = _nt_like2_keyword
              if r9
                r9 = SyntaxNode.new(input, (index-1)...index) if r9 == true
                r7 = r9
              else
                r10 = _nt_like4_keyword
                if r10
                  r10 = SyntaxNode.new(input, (index-1)...index) if r10 == true
                  r7 = r10
                else
                  r11 = _nt_likec_keyword
                  if r11
                    r11 = SyntaxNode.new(input, (index-1)...index) if r11 == true
                    r7 = r11
                  else
                    @index = i7
                    r7 = nil
                  end
                end
              end
            end
            s0 << r7
            if r7
              r12 = _nt_space
              s0 << r12
              if r12
                r13 = _nt_text_literal
                s0 << r13
                if r13
                  i15, s15 = index, []
                  r16 = _nt_space
                  s15 << r16
                  if r16
                    r17 = _nt_escape_keyword
                    s15 << r17
                    if r17
                      r18 = _nt_space
                      s15 << r18
                      if r18
                        r19 = _nt_text_literal
                        s15 << r19
                      end
                    end
                  end
                  if s15.last
                    r15 = instantiate_node(SyntaxNode,input, i15...index, s15)
                    r15.extend(LikeCondition1)
                  else
                    @index = i15
                    r15 = nil
                  end
                  if r15
                    r14 = r15
                  else
                    r14 = instantiate_node(SyntaxNode,input, index...index)
                  end
                  s0 << r14
                end
              end
            end
          end
        end
      end
      if s0.last
        r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
        r0.extend(LikeCondition2)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:like_condition][start_index] = r0

      r0
    end

    module RegexpLikeCondition0
      def regexp_like_keyword
        elements[0]
      end

      def ident
        elements[3]
      end

      def text_literal
        elements[7]
      end

    end

    def _nt_regexp_like_condition
      start_index = index
      if node_cache[:regexp_like_condition].has_key?(index)
        cached = node_cache[:regexp_like_condition][index]
        if cached
          node_cache[:regexp_like_condition][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      r1 = _nt_regexp_like_keyword
      s0 << r1
      if r1
        if (match_len = has_terminal?('(', false, index))
          r2 = true
          @index += match_len
        else
          terminal_parse_failure('\'(\'')
          r2 = nil
        end
        s0 << r2
        if r2
          r4 = _nt_space
          if r4
            r3 = r4
          else
            r3 = instantiate_node(SyntaxNode,input, index...index)
          end
          s0 << r3
          if r3
            r5 = _nt_ident
            s0 << r5
            if r5
              r7 = _nt_space
              if r7
                r6 = r7
              else
                r6 = instantiate_node(SyntaxNode,input, index...index)
              end
              s0 << r6
              if r6
                if (match_len = has_terminal?(',', false, index))
                  r8 = true
                  @index += match_len
                else
                  terminal_parse_failure('\',\'')
                  r8 = nil
                end
                s0 << r8
                if r8
                  r10 = _nt_space
                  if r10
                    r9 = r10
                  else
                    r9 = instantiate_node(SyntaxNode,input, index...index)
                  end
                  s0 << r9
                  if r9
                    r11 = _nt_text_literal
                    s0 << r11
                    if r11
                      r13 = _nt_space
                      if r13
                        r12 = r13
                      else
                        r12 = instantiate_node(SyntaxNode,input, index...index)
                      end
                      s0 << r12
                      if r12
                        if (match_len = has_terminal?(')', false, index))
                          r14 = true
                          @index += match_len
                        else
                          terminal_parse_failure('\')\'')
                          r14 = nil
                        end
                        s0 << r14
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
      if s0.last
        r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
        r0.extend(RegexpLikeCondition0)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:regexp_like_condition][start_index] = r0

      r0
    end

    def _nt_range_condition
      start_index = index
      if node_cache[:range_condition].has_key?(index)
        cached = node_cache[:range_condition][index]
        if cached
          node_cache[:range_condition][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      if (match_len = has_terminal?('range_condition', false, index))
        r0 = instantiate_node(SyntaxNode,input, index...(index + match_len))
        @index += match_len
      else
        terminal_parse_failure('\'range_condition\'')
        r0 = nil
      end

      node_cache[:range_condition][start_index] = r0

      r0
    end

    module NullCondition0
      def not_keyword
        elements[0]
      end

      def space
        elements[1]
      end
    end

    module NullCondition1
      def expr
        elements[0]
      end

      def space1
        elements[1]
      end

      def is_keyword
        elements[2]
      end

      def space2
        elements[3]
      end

      def null_keyword
        elements[5]
      end
    end

    def _nt_null_condition
      start_index = index
      if node_cache[:null_condition].has_key?(index)
        cached = node_cache[:null_condition][index]
        if cached
          node_cache[:null_condition][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      r1 = _nt_expr
      s0 << r1
      if r1
        r2 = _nt_space
        s0 << r2
        if r2
          r3 = _nt_is_keyword
          s0 << r3
          if r3
            r4 = _nt_space
            s0 << r4
            if r4
              i6, s6 = index, []
              r7 = _nt_not_keyword
              s6 << r7
              if r7
                r8 = _nt_space
                s6 << r8
              end
              if s6.last
                r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
                r6.extend(NullCondition0)
              else
                @index = i6
                r6 = nil
              end
              if r6
                r5 = r6
              else
                r5 = instantiate_node(SyntaxNode,input, index...index)
              end
              s0 << r5
              if r5
                r9 = _nt_null_keyword
                s0 << r9
              end
            end
          end
        end
      end
      if s0.last
        r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
        r0.extend(NullCondition1)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:null_condition][start_index] = r0

      r0
    end

    def _nt_xml_condition
      start_index = index
      if node_cache[:xml_condition].has_key?(index)
        cached = node_cache[:xml_condition][index]
        if cached
          node_cache[:xml_condition][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      if (match_len = has_terminal?('xml_condition', false, index))
        r0 = instantiate_node(SyntaxNode,input, index...(index + match_len))
        @index += match_len
      else
        terminal_parse_failure('\'xml_condition\'')
        r0 = nil
      end

      node_cache[:xml_condition][start_index] = r0

      r0
    end

    module CompoundCondition0
      def logical_condition
        elements[1]
      end

    end

    def _nt_compound_condition
      start_index = index
      if node_cache[:compound_condition].has_key?(index)
        cached = node_cache[:compound_condition][index]
        if cached
          node_cache[:compound_condition][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      if (match_len = has_terminal?('(', false, index))
        r1 = true
        @index += match_len
      else
        terminal_parse_failure('\'(\'')
        r1 = nil
      end
      s0 << r1
      if r1
        r2 = _nt_logical_condition
        s0 << r2
        if r2
          if (match_len = has_terminal?(')', false, index))
            r3 = true
            @index += match_len
          else
            terminal_parse_failure('\')\'')
            r3 = nil
          end
          s0 << r3
        end
      end
      if s0.last
        r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
        r0.extend(CompoundCondition0)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:compound_condition][start_index] = r0

      r0
    end

    module BetweenCondition0
      def not_keyword
        elements[0]
      end

      def space
        elements[1]
      end
    end

    module BetweenCondition1
      def expr1
        elements[0]
      end

      def space1
        elements[1]
      end

      def between_keyword
        elements[3]
      end

      def space2
        elements[4]
      end

      def expr2
        elements[5]
      end

      def space3
        elements[6]
      end

      def and_keyword
        elements[7]
      end

      def space4
        elements[8]
      end

      def expr3
        elements[9]
      end
    end

    def _nt_between_condition
      start_index = index
      if node_cache[:between_condition].has_key?(index)
        cached = node_cache[:between_condition][index]
        if cached
          node_cache[:between_condition][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      r1 = _nt_expr
      s0 << r1
      if r1
        r2 = _nt_space
        s0 << r2
        if r2
          i4, s4 = index, []
          r5 = _nt_not_keyword
          s4 << r5
          if r5
            r6 = _nt_space
            s4 << r6
          end
          if s4.last
            r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
            r4.extend(BetweenCondition0)
          else
            @index = i4
            r4 = nil
          end
          if r4
            r3 = r4
          else
            r3 = instantiate_node(SyntaxNode,input, index...index)
          end
          s0 << r3
          if r3
            r7 = _nt_between_keyword
            s0 << r7
            if r7
              r8 = _nt_space
              s0 << r8
              if r8
                r9 = _nt_expr
                s0 << r9
                if r9
                  r10 = _nt_space
                  s0 << r10
                  if r10
                    r11 = _nt_and_keyword
                    s0 << r11
                    if r11
                      r12 = _nt_space
                      s0 << r12
                      if r12
                        r13 = _nt_expr
                        s0 << r13
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
      if s0.last
        r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
        r0.extend(BetweenCondition1)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:between_condition][start_index] = r0

      r0
    end

    module ExistsCondition0
      def exists_keyword
        elements[0]
      end

      def subquery
        elements[4]
      end

    end

    def _nt_exists_condition
      start_index = index
      if node_cache[:exists_condition].has_key?(index)
        cached = node_cache[:exists_condition][index]
        if cached
          node_cache[:exists_condition][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      r1 = _nt_exists_keyword
      s0 << r1
      if r1
        r3 = _nt_space
        if r3
          r2 = r3
        else
          r2 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r2
        if r2
          if (match_len = has_terminal?('(', false, index))
            r4 = true
            @index += match_len
          else
            terminal_parse_failure('\'(\'')
            r4 = nil
          end
          s0 << r4
          if r4
            r6 = _nt_space
            if r6
              r5 = r6
            else
              r5 = instantiate_node(SyntaxNode,input, index...index)
            end
            s0 << r5
            if r5
              r7 = _nt_subquery
              s0 << r7
              if r7
                r9 = _nt_space
                if r9
                  r8 = r9
                else
                  r8 = instantiate_node(SyntaxNode,input, index...index)
                end
                s0 << r8
                if r8
                  if (match_len = has_terminal?(')', false, index))
                    r10 = true
                    @index += match_len
                  else
                    terminal_parse_failure('\')\'')
                    r10 = nil
                  end
                  s0 << r10
                end
              end
            end
          end
        end
      end
      if s0.last
        r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
        r0.extend(ExistsCondition0)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:exists_condition][start_index] = r0

      r0
    end

    module InCondition0
      def not_keyword
        elements[0]
      end

      def space
        elements[1]
      end
    end

    module InCondition1
      def expr
        elements[0]
      end

      def space
        elements[1]
      end

      def in_keyword
        elements[3]
      end

    end

    def _nt_in_condition
      start_index = index
      if node_cache[:in_condition].has_key?(index)
        cached = node_cache[:in_condition][index]
        if cached
          node_cache[:in_condition][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      r1 = _nt_expr
      s0 << r1
      if r1
        r2 = _nt_space
        s0 << r2
        if r2
          i4, s4 = index, []
          r5 = _nt_not_keyword
          s4 << r5
          if r5
            r6 = _nt_space
            s4 << r6
          end
          if s4.last
            r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
            r4.extend(InCondition0)
          else
            @index = i4
            r4 = nil
          end
          if r4
            r3 = r4
          else
            r3 = instantiate_node(SyntaxNode,input, index...index)
          end
          s0 << r3
          if r3
            r7 = _nt_in_keyword
            s0 << r7
            if r7
              r9 = _nt_space
              if r9
                r8 = r9
              else
                r8 = instantiate_node(SyntaxNode,input, index...index)
              end
              s0 << r8
              if r8
                if (match_len = has_terminal?('(', false, index))
                  r10 = true
                  @index += match_len
                else
                  terminal_parse_failure('\'(\'')
                  r10 = nil
                end
                s0 << r10
                if r10
                  r12 = _nt_space
                  if r12
                    r11 = r12
                  else
                    r11 = instantiate_node(SyntaxNode,input, index...index)
                  end
                  s0 << r11
                  if r11
                    i13 = index
                    r14 = _nt_exprs
                    if r14
                      r14 = SyntaxNode.new(input, (index-1)...index) if r14 == true
                      r13 = r14
                    else
                      r15 = _nt_subquery
                      if r15
                        r15 = SyntaxNode.new(input, (index-1)...index) if r15 == true
                        r13 = r15
                      else
                        @index = i13
                        r13 = nil
                      end
                    end
                    s0 << r13
                    if r13
                      r17 = _nt_space
                      if r17
                        r16 = r17
                      else
                        r16 = instantiate_node(SyntaxNode,input, index...index)
                      end
                      s0 << r16
                      if r16
                        if (match_len = has_terminal?(')', false, index))
                          r18 = true
                          @index += match_len
                        else
                          terminal_parse_failure('\')\'')
                          r18 = nil
                        end
                        s0 << r18
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
      if s0.last
        r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
        r0.extend(InCondition1)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:in_condition][start_index] = r0

      r0
    end

    def _nt_is_of_type_condition
      start_index = index
      if node_cache[:is_of_type_condition].has_key?(index)
        cached = node_cache[:is_of_type_condition][index]
        if cached
          node_cache[:is_of_type_condition][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      if (match_len = has_terminal?('is_of_type_condition', false, index))
        r0 = instantiate_node(SyntaxNode,input, index...(index + match_len))
        @index += match_len
      else
        terminal_parse_failure('\'is_of_type_condition\'')
        r0 = nil
      end

      node_cache[:is_of_type_condition][start_index] = r0

      r0
    end

    def _nt_group_by_clause
      start_index = index
      if node_cache[:group_by_clause].has_key?(index)
        cached = node_cache[:group_by_clause][index]
        if cached
          node_cache[:group_by_clause][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      if (match_len = has_terminal?('group_by_clause', false, index))
        r0 = instantiate_node(SyntaxNode,input, index...(index + match_len))
        @index += match_len
      else
        terminal_parse_failure('\'group_by_clause\'')
        r0 = nil
      end

      node_cache[:group_by_clause][start_index] = r0

      r0
    end

    def _nt_model_clause
      start_index = index
      if node_cache[:model_clause].has_key?(index)
        cached = node_cache[:model_clause][index]
        if cached
          node_cache[:model_clause][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      if (match_len = has_terminal?('model_clause', false, index))
        r0 = instantiate_node(SyntaxNode,input, index...(index + match_len))
        @index += match_len
      else
        terminal_parse_failure('\'model_clause\'')
        r0 = nil
      end

      node_cache[:model_clause][start_index] = r0

      r0
    end

  end

  class OracleParser < Treetop::Runtime::CompiledParser
    include Oracle
  end

end
